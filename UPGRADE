Upgrade from 1.3 to ???
=======================

Behaviors
---------

The symfony-Propel behaviors system has been refactored to utilitize `sfEventDispatcher` instead of `sfMixer`.

The following methods of `sfPropelBehavior` have been deprecated:

 * `->registerMethods()`
 * `->registerHooks()`

Instead of registering methods and hooks, behaviors now utilize _listeners,_ which can connect to any of the following events:

  *Old hook name*               | *New event name*
  ----------------------------- | -----------------------
  `:delete:pre`                 | `propel.pre_delete`
  `:delete:post`                | `propel.post_delete`
  `:save:pre`                   | `propel.pre_save`
  `:save:post`                  | `propel.post_save`
  `Peer:doSelectStmt`           | `propel.do_select`
  `Peer:doSelectJoin`           | `propel.do_select`
  `Peer:doSelectJoinAll`        | `propel.do_select`
  `Peer:doSelectJoinAllExcept`  | `propel.do_select`
  `Peer:doCount`                | `propel.do_count`
  `Peer:doInsert:pre`           | `propel.pre_do_insert`
  `Peer:doInsert:post`          | `propel.post_do_insert`
  `Peer:doUpdate:pre`           | `propel.pre_do_update`
  `Peer:doUpdate:post`          | `propel.post_do_update`

A behavior can register a listener using the new `sfPropelBehavior::registerListeners()` method:

    [php]
    sfPropelBehavior::registerListeners('my_behavior', array(
      'method_not_found' => array('myBehavior', 'listenForMethodNotFound'),
      'pre_save'         => array('myBehavior', 'listenForPreSave'),
    ));

As with any other event listener, these callables should expect an instance of `sfEvent` as their one and only parameter (or rather `sfEventPropel`, and extension of `sfEvent`). This event object will include a `parameters` parameter, which will include any user parameters included when the behavior was added to the extended model class.

For example, the following `schema.yml` ...

    [yml]
    classes:
      Article:
        tableName:    articles
        columns:
          id:         ~
          title:      varchar(255)
          body:       longvarchar
          created_at: ~
        behaviors:
          myBehavior: { foo: bar }

... would expose the following parameters to a listener:

    [php]
    static public function listenForMethodNotFound(sfEvent $event)
    {
      var_export($event['parameters']);
      // array('foo' => 'bar')
    }

### Introducing `sfEventPropel`

It is now possible to access and mutate `protected` and `private` variables, or create new variables on a Propel model object from a listener. All events dispatched by model objects include an `object_vars` parameter, which contains the return value of a call to `get_object_vars($this)` from inside the object. These values can be modified using the `->mutateObject()` method on the event object.

    [php]
    static public function listenForMethodNotFound(sfEventPropel $event)
    {
      $arguments = $event['arguments'];

      switch ($event['method'])
      {
        case 'flagAsFoo':
          $flagged = (boolean) isset($arguments[0]) ? $arguments[0] : true;

          // adds a ->flaggedFoo variable to the Propel object
          $event->mutateObject('flaggedFoo', $flagged);

          return true;

        case 'isFlaggedAsFoo':
          $vars = $event['object_vars'];
          $flagged = isset($vars['flaggedFoo']) ? $vars['flaggedFoo'] : false;

          $event->setReturnValue($flagged);

          return true;
      }

      return false;
    }

### Backward Compatibility

 * The new symfony-Propel behaviors system is 100% backwards compatible with `sfMixer`-style behaviors. Any behavior that registers callables for symfony 1.1 style hooks will continue functioning as expected.
 * The collection of `Peer:doSelectXXX` hooks introduced in symfony 1.1 have been consolidated to one `propel.do_select` event. This event object includes a `method` parameter, which will include the value of the `__FUNCTION__` constant from inside the issuing method.